* Chapter 6: Concurrency, Deadlock and Starvation
    ** Student Lecture 1 [2025-3-31 Mon]

        *** Concurrency 
            - Deadlock:
                - blocking of processes due to communication errors or competition
                - reusable resources used by one process at a time and are not depleted
                - consumable resources can be created and destroyed, used only once (interrupts, signals, messages, etc.)
                    - happens when two processes are waiting on each other indefinitely, for example both processes are waiting to recieve a message but none are sending
                    - another example is when processes are requesting memory but there is not enough 
                - conditions for deadlock: mutual exlcusion, hold and wait, no preemption, circular wait 
                - approaches: deadlock prevention, deadlock avoidance, deadlock detection and recovery (note: no one strategy deals with all types of deadlock)
        
        *** Deadlock Prevention 
            - conditions: 
                - mutual exlcusion: ony one process can use a resource at any given time 
                - hold and wait: a process holding at least one resource is waiting to acquire aditional resources held by other processes 
                - no preemption: resources cannot be forcibly taken from a process, they must be released voluntarily
                - circular wait: a closed chain of processes exists, each waiting for a resource which is help by another process in the chain
            - prevention: the system eliminates one or more of the four necessary conditions 
                - mutual exclusion: uses locks and read-only access for files or databases to allow concurrent access to resources. 
                - hold and wait: require processes to request all needed resrrouces upfront before execution begins. or, ensure a process can only requuest resources when it holds none.
                - preemption: if a process requests a resource that is unavailable, it must release all currently held resrouces and re-request everything. the OS may be allowed to preempt 
                  resources from lower-priority processes. 
                - circular wait: impose a total ordering of all resource types (R1< R2 < R3). or, require processes to request resources in increasing order only. 

        *** Deadlock Avoidance
            - Deadlock Avoidance Concept:
                - necessary conditions to prevent deadlock: mutual exclusion, hold and wait, no preemption
                - different from deadlock prevention, because allows the three necessary conditions, but is able to make judicious choices to ensure that the deadlock point is never reached.
                - therefore, avoidance allows for more concurrency than prevention. 
                - deadlock avoidance is more dynamic due to knowledge of future process resource requests. once it knows these requests, it can decide which resource allocation request will 
                  lead to a deadlock.
                - two approaches:
                    - process initiation: "do not start a process if its demands might lead to a deadlock"
                    - resource allocation denial: "do not grant an incremental resource request to a process if this allocation might lead to a deadlock"
            - Process Initiation Denial in Detail:
                - Key structures:
                    - vectors: resource, available
                    - matrices: claim, allocation
                    - each have their own formulas, search it up (cant insert images).
                    - resource vector is the total amount of each resource in the system
                    - available vector is the total amount of each resource not allocated to any process
                    - claim matrix gives the maximum requirement of each process for each resource. each row is one process in the matrix
                    - allocation matrix gives the current allocation to each process.
                - Relationships for structures:
                    - 1. all resources are either available or allocated (insert formula, page 301 of textbook)
                    - 2. no process can claim more than the total amount of resources in the system (insert formula, page 301 of textbook)
                    - 3. no process is allocated more resources of any type than the process originally claimed to need (insert formula, page 301 of textbook)
                - Process initiation algorithm:
                    - a deadlock avoidance policy that refuses to start a new process if its resource requirements might lead to deadlock.
                    - a new process Pn+1 will be started only if the maximum claim of all current processes plus those of the new process can be met 
                    - strategy is not optimal because we are assuming the worst which is that all processes will make their maximum claims together 
                    - (insert formula, page 301 of textbook)
            - Resource Allocation Denial (Banker's Algorithm):
                - referred to as the banker's algorithm, originated from an analogy to a similar problem in banking, where a bank has a limited reserve of money to lend and a list of customers
                  each with their own credit limit. a customer can borrow money but there is no guarantee that the customer will make a repayment until they've hit the maximum.
                  the bank must be careful to optimize their money, because if they lend too much in the form of loans, they can run out of funds
                - similar to resource allocation denial, the computer needs to know how many resources to provide each process.
                - definition of states:
                    - consider a system with a fixed number of processes and a fixed number of resources.
                    - state: is the current allocation of resources to processes. it consists of the two vectors and two matrices as defined previously. (resource, available, claim, allocation)
                    - safe state: state in which there is at least one sequence of resource allocations to processes that does not result in a deadlock, meaning all of the processes can run
                      to completion. 
                    - unsafe state: is a state that is not safe, and can cause issues. 
                - condition of for safety:
                    -  Cij - Aij â‰¤ Vj for all j (insert formula, page 302 of textbook)
                    - basically, where C is the claim matrix, A is the allocation matrix, we are checking if the difference between the maximum requirement C and the current allocation A for any process
                      can be met with the resources available. 
                - figure 6.7 page 303 example:
                    - this example is going to go over how to determine a safe state 
                    - part a: initial state
                        - just focus on what i am saying, it will hopefully be easier to understand
                        - 4 processes and 3 resources
                        - C is what we need to meet for each process (our expectation/requirement), for example process 1 needs 3 units of R1, 2 units of R2, and 2 units of R3 in order to run to completion
                        - A is sort of like our given matrix, it is the resources that are already allocated to each process
                        - what we need to check is our available vector V, and determine which process can be provided these available resources in order to run and therefore fully complete
                        - as we can see, we have 1 unit of R2 and 1 unit of R3 available, and if we add 1 unit of R3 to P2 in A, we get 6 1 3 which is our expectation. 
                        - now, P2 will be able to run
                    - part b: P2 completion
                        - after P2 completes running, the resources we used for it will be given back to us in our available vector.
                        - as we can see, P2 has 0 across all matrices, and our available vector has more resources for us to use from the allocation matrix A.
                        - now we need to determine another process that can run, and since we have more resources, it will be easier. 
                        - P1 needs 2 units of R1, 2 units of R2, and 2 units of R3 to run and match our expectation, which we have available.
                        - P1 will now run. 
                    - part c: P1 completion
                        - now P1 is complete, and P1 has 0's across all matrices and our resources are given back to us in the available vector V. 
                        - lets determine another process that can run, lets choose P3. 
                        - P3 needs 1 unit of R1, and 3 units of R3, to meet the expectation. 
                        - P3 will now run. 
                    - part d: P3 completion 
                        - as we can see, P3 also now has 0's and our resources are given back to us. 
                        - we can go even further to complete P4, but i will stop here. 
            - Unsafe States:
                - in figure 6.8 page 304, we can see that if P1 were to make a request for 1 unit of R1 and 1 unit of R3, it would not meet our expectation, therefore with deadlock avoidance this
                  request is denied and our resources won't be used up. 
                - this is what we consider an unsafe state, because it does not meet our expectation of claim matrix C. 
                - unsafe does not mean deadlocked, but it means that the state has potential to become deadlocked. remember that deadlock avoidance is a prediction method. 
                - however, deadlock avoidance does not predict deadlock with certainty. 
                - advantage: it is not necessary to preempt and rollback processes, as in deadlock detection, which makes it less resrictive
                - restrictions:
                    - maximum resource requirement for each process must be stated in advance 
                    - the processes under consideration must be independent, that is the order in which they execute must be unconstrained by any synchronization requirements 
                    - there must be a fixed number of resources to allocate 
                    - no process may exit while holding resources

        *** Deadlock Detection and UNIX Mechanisms 
            - Deadlock detection: 
                - allow every single resource request to go through whenever possible and check deadlocks periodically and deal with the consequences as they come. 
                - what if a deadlock check is positive?: 
                    - 1. abort all deadlocked processes (wasted resources)
                    - 2. use a checkpoint system (process state backups), revert back to the original state where it isn't deadlocked (more complex and more memory for these checkpoints)
                    - 3. abort deadlocked processes one by one 
                    - 4. preempt resources from deadlocked processes until resolved (can be unstable)
                - deadlock checks:
                    - done through vectors and matrices storing information on process and resources 
            - UNIX Concurrency Mechanisms: 
                IPC forms:
                    - pipes:
                        - data and communitcation goes in one direction 
                        - unnames pipes: used for communication between related processes, uses pipe() system call, temporary 
                        - named pipes: fifos, used for communication between unrelated processes, uses mkfifo() system call 
                    - messages: 
                        - mailbox sending and recieving things. 
                        - msgsnd()
                        - msgcvr()
                        - message is a data structure that uses queues to store messages sent by one process until they are retrieved by another process
                    - signals: 
                        - similar to hardware interrupts, but just for software. 
                        - reations:
                            - performing a default action 
                            - handling the signal 
                            - ignoring the signal
                        - ex. sigint (ctrl-c to stop running a program)
                    - semaphores:
                        - binary sempahores
                        - counting semaphores