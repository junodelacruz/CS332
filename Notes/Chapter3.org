* Chapter 3: Process Description and Control
    ** Student Lecture 1 [2025-2-10 Mon]
        *** Process and Process States
            - processes: consists of a number of elements with the 2 essential being the program code and the set of data associated with the code
            - a process allows a program to run
            - process characterized by: identifier, state, priority, program couonter, memory pointers, context data, IO status information, and accounting information
            - process control blocks: elements are stored in an important data structure created and managed by the OS
            - allows for multiprocessing and execution of multiple processes
            - a trace is a list of the sequence of instructions used to characterize behavior
            - a dispatcher is a small program responsible for switching between processes
            - a state refers to the condition of a process
            - 2 state model: not running or running. when a process is created, a program control block is created and the process enters a not running state,
              when it is interrupted, it is also not running. 
            - 2 state model uses a queue that stores pointers to process control block
            - process state creation: process spawning is when a process requests the operating system to create another process
            - 5 state model: new process becomes ready and dispatched to become running, once it is done it releases and exits, 
              or it can get interrupted by a timeout and wait for another event to occur, then go back to running
            - suspended processes: swapping is when the process or part of it is moved from the main memory to the disk
            - a program is made up of code, and data. additionally, it has a stack where computation results are stored. LIFO (last in first out)
            - PCB (program control block contains): PID, PC, and priority data needed by the OS to support the program. the data in the PCB is all meta data

        *** Process Control
            - modes of creation:
                - user mode: less priviledged, user processes and applications run in this mode. restricted access. 
                - system mode: more priviledged, kernel mode. used to remap memory, write to storage media, and to enable or disaable hardware
                - to switch between modes, the application running in user mode requests the OS to switch to system mode to for example save a file
            - process creation: 
                - process spawning, the OS creates a process at the explicit request of another process
                - process is assigned a unique identifier, space is allocated for the process, the process 
                  control block is initizlized, the appropriate linkages are set, and any data structures are expanded or created
                - reasons for creation of processes: new batch job, interactive log-on, etc.
                - for every application and program, the OS creates the same container for the programs, and generalizes the processes to make management easier
                    - analogy: when movers move the furniture in a home, they give you boxes of the same size so that everything can fit in the car
            - process control:
                - fork()
                - counters for any files owned by the parent are incremented to reflect that additional processes now also own those files
                - after fork(), the parent process can stay, the control can transfer to the child, or the control can be transferred to another process
            - process switching: (happens on CPU to off CPU)
                - useful for multitasking and reponsiveness, allows for multiple programs to run
                - during a switch, the OOS saves the state of the current running process, then the OS loads the context of the next 
                  process that is scheduled to run, then the CPU resumes execution of the newly loaded process
                - advantages: better CPU utilization
                - disadvantages: context switching overhead, which is when time is spent loading and saving contexts but does not perform any useful work
                - mode switching: triggered by interrupts or system calls (switching from driver seat to passenger seat)
                - process switching: (switching from car to car)
            - context overhead:
                - when the CPU switches from one process to another, the OS must save the process's contet and then load a new process
            - scheduling overhead:
                -  predicting the next process to run/schedule to save time. processes are predicted by algorithms, with things like priority queues.
            
        *** Execution of Operating Systems
            - nonprocess kernel: 
                - executes the kernal outside of any processes, OS has its own memory that controls calls and returns
                - handles memory management, hardware execution, and interrupt handling
                - OS can restore the context of the interrupted process
            - introducing process image:
                - a process image is the representation of a process in memory, containing all information needed for execution
            - process control block
                - a data structure that stores all essential information about a process
            - user space:
                - memory area where user applications run
                - executes user programs and manages application level tasks
                - makes sure that when a program crashes it doesnt affect other programs

    ** Professor Lecture 1 [2025-2-20 Thu]
        *** Process States
            - trace: behavior of an individual process by listing the sequence of instructions that execute for that process
            - dispatcher: small program that switches the processor from one process to another 
            - work together to read processes, after timeouts or I/O requests, dispatcher in main memory switches between processes
            - I/O is really slow, so typically I/O requests get interrupted. we force the dispatcher to move to another process. process gets blocked, 
              waits for the I/O to complete. 
            - dispatcher runs most frequently, runs everytime two processes switch
        *** Two-state process model
            - if a process is on the CPU it means it is running. only one processor can run one process
            - other processes not running is held in a queue data structure
            - there are many many reasons why processes terminate
        *** Five-state process model
            - when a process is running, it can get timed-out and then goes into a ready queue, if the running process is waiting it is 
              pushed into the blocked queue, any ready process in the ready queue gets dispatched back into the running queue.
        *** Swapping/Suspended Processes (Six-state process model)
            - swapping is needed because sometimes we can run out of memory, even though memory is upgraded still maxed out because OS maximizes 
              resource usage
            - if a process is not in the memory it cant be executed (suspended)
            - if a process is waiting for an I/O it cant be executed either
            - in order to run, it must be swapped back to be in the memory and therefore to be in the ready state again
            - this extra step makes for the 6-state process model where blocked processes are suspended and swapped to have more memory and increase speed
            - however, there is a design flaw where processes can be put back to square one because after it is blocked it may not be ready yet
            - to fix this, we add two more queues, the blocked and ready suspended queues
        *** Seven-state process model
            - if a process is in the memory and waiting for an IO, then it is in blocked
            - if a process is in the memory but not waiting for an IO, it is in running or ready
            - if a process is not in the memory but waiting for an IO, it is blocked suspended
            - if a process is not in the memory but not waiting for an IO, it is in the ready suspended
            - not in memory means suspended
        *** Stacks
            - last in first out (LIFO)
            - fast and simpler than FIFO (first in first out)
            - efficient, parameters and variables can be pushed or popped when needed

        ** Professor Lecture 2 [2025-2-24 Mon]
            *** Kernel
                - kernel is a program, that does not a process to execute, creates processes for application
                - virtual memory address, each application believes its memory starts from address 0, but this is an illusion used to isolate processes
                - each program gets its own space in the memory, yet each program believes it has the max memory available
                - address 0 has 1 byte, if a system is a 32 bit system it can manage 4 GB because 2^32 = 2^1 x 2^10 x 2^10 x 2^10
                - if machine is 32 bit system, every process can use up to 32 GB of memory
                - each process is given a lot of memory space, even though it is virtual
                - kernel maintains its own data structure, its own stack, etc. 
                - kernel runs functions on behalf of the process
                - when processes need access to system resources, they switch to kernel mode through system calls
            *** Execution within user processes
                - kernel stack is inside the kernel space, which is within the userspace 
            *** Unix SVR4 (system five release four)
                - unix process states: user running, kernel running, zombie, etc 
                - unix is a 9 state process model, with an additional user running and kernel running
                - the reason for these two different running states is because when a process is runnning it can be running in two different modes, kernel or user 
                - kernel provides a lot of services, and does a lot of housekeeping within a system, the kernel can be in a preempt state where it does a completely 
                  different function such as accounting (from beginning of chapter 2) and then goes back to whatever the user is running
                - sleep in this model is the same as blocked in the other model 
        
        ** Professor Lecture 3 [2025-2-27 Thu]
            *** Process image 
                - made up of code (text), user data, pcb (process control block), stack 
                - process control block three parts
                    - PID (process ID), CPU (processor information including the registers and program counters), process control information (meta data of the process)
            *** Interrupts 
                - usually due to hardware, ex. timer interrupt and I/O device interrupt
                - handled by a software called interrupt service routine (ISR) 
                - for hardware interrupts, the cpu goes to sleep, wakes up with another task 
            *** Traps 
                - software interrupts, ex. system calls, page faults, divide by zero exceptions
                - handled by a trap handler 
            *** U area 
                - all of the things controlled by the OS for controlling the users
            *** UNIX 
                - uses a kernel system call forK() to create new processes, uses a model parent to create a child process 
                - after creation, the kernel can stay in the parent process, transfer control to the child process, or transfer control to another process
            *** ch3 instructors notes slide 22 might be on the exam
                - open ended question example
                - at time 5, no I/O 
                - b: blocked, r: ready/running, bs: blocked suspended, e: exit, rs: ready suspended
                - Time | p1 p3 p5 p7 p8
                ------------------------
                - 5    | b  
                -15    |       r 
                -18    |          b
                -20    |    b
                -24    |       b
                -28    |       bs
                -33    |    r
                -36    | r
                -38    |             e
                -40    |       rs
                -44    |       r
                -48    |          r

        

