* Chapter 4: Threads
    ** Student Lecture 1 [2025-2-24 Mon]
        *** Processes and Threads
          - threads are smaller execution units within a process that allows for parallel executuion
          - processes can have multiple threads execeuting within it 
          - threads share memory with other threads within a process 
          - threads have faster communication and context switching 
          - thread life cycle:
            - new, runnable, running, blocked, waiting, terminated
          - thread creation:
            - created with java 
          - thread sync:
            - mutexes, semaphores, monitors
          - thread pools:
            - manage multiple threads to improve cpu performance
        *** Multithreading
          - multiple threads running within a process to improve CPU utilization
          - makes communication faster between processes
          - single threaded:
            - a process can only do one task at a time, bad efficiency
          - multi threaded:
            - allows a process to perform multiple Tasks
          - advantages:
            - faster to create threads over processes, faster context switching, multiple threads can run, shared memory and resources, etc.
          - disadvantages:
            - increases complexity, difficult debugging and conflicts between threads, too many threads leads to excessive context switching which can reduce performance
        *** Threads
          - user level threads:
            - managed by application, not kernel
            - kernel doesnt see the thread
            - advantages: allows for thread switching without kernel level priveleges, faster since no system calls are needed, portaable
            - disadvantages: system calls are blocking, entire process can get blocked because of one thread causing inefficiency
            - jacketing: a method to convert a blocking system call to a non blocking system call to prevent the entire process from getting blocked
            - writing an application as multiple processes instead as multiple threads: eliminates the advantages of having multiple threads
          - kernel level threads:
            - managed by kernel instead of application, applications use API to interact with the kernel threads, windows uses kernel level threads
            - advantages: parallel execution, better responsiveness, multithreaded kernel which allows for multiple system routines to execute at the same time 
            - disadvantages: high overhead which means that switching requires a mode switch between user and kernel, slower context switching, and higher latency
        *** Multicore and Multithreading
          - uses both user and kernel level threads. allows for improved performance
          - user threads ask kernel threads for system resources, user manages application and kernel threads manage kernel
          - multithreaded native application benefits from this combined approach, so does java, and multiinstance application where there are multiple instances that run
            in parallel
        *** Multithreaded Architecture
          - solaris thread: unix based OS that implements multilevel thread support for scalability, stability, and high performance
          - ULT, LWP, Kernel thread: three level multithreaded architecture made up of user level, lightweight process, and kernel threads
          - LWP data structure: priority, signal mask, registers, stacks, resource usage and profiling data, and pointers
          - state diagram: run, sleep, zombie, blocked, free 
          - interrupts as threads: reduced overhead and increases performance, handled by kernel threads. each interrupt has their own ID, priority, context, and stack
        *** Linux Tasks
            - task_struct: a data structure in linux that represents a process or task. contains information on the following:
                - execution state of a process
                - scheduling information
                - identifiers unique to each process
                - interprocess communication
                - links between processes to the parent processes
                - timers for processes
                - file system that allows for pointers to any files and directories that the process is using 
                - address space that defines addresses assigned to the process
                - processor specific context
            - linux process/thread model:
                - running, running or ready
                - interruptible, blocked state and waiting for an event such as IO or signal from another process
                - uninterruptible, blocked state and waiting directly for hardware conditions, not signals
                - stopped, halted process and can only resume by positive action from another process
                - zombie, process can be terminated but for some reason must have its task structure in the process table
        *** Linux Threads
            - modern unix like linux supports multiple kernel-level threads. 
            - linux treats threads and processes similarly allowing for shared resources like files and memory
            - new processes in linux are created by copying attributes of existing processes using clone() instead of fork(). allows for processes to share 
              resources such as memory, file descriptors, and signal handlers, effectively functioning as threads within a single process. 
            - clone flags:
                - CLONE_NEWPID, creates new process ID namespace 
                - CLONE_PARENT, allows for parent process sharing
                - CLONE_VM, address spaces
                - CLONE_FS, file system state
                - etc.
            - during context switches, if processes share the same address switching is easy. however, cloned processes dont share stacks, meaning for each process
              it needs separate stacks to use
        *** Linux Namespaces
            - namespaces are associated with each process or processes. they are like a way of grouping processes. each group or namespace has a different 
              view of the system. it allows and is important for linux lightweight virtualization, which is a method that allows for processes to believe they 
              are the only processes in the system
            - created by clone() system call, each namespace receives a parameter from the clone flags listed above
            - also created by unshare() which is a call where a process is not created but a new namespace only is created with its attached clone flags
            - namespaces:
                - mount: provides the process with a specific view of the filesystem hierarchy. all file operations that the process does only applies to the
                  filesystem that is visible to the process
                - uts: unix timesharing, related to the uname system call, which provides info about the current kernel like the name (nodename) and network
                  domain (domainname). the domainname is part of the network information service (NIS) which allows for multiple UNIX systems to share common
                  configuration files. allows for easier system administration. important because it allows processes on the same system to have different names
                  and configurations. containerization, where each container has its own hostname and domainname
                - ipc: creates a separate environment for communication resources like sephamores and message queues. processes within the same ipc namespace
                  can communicate with each other, while being isolated from other processes in other namespaces. good for security and containerization to ensure
                  that other apps dont interfere with this IPC's resources. stands for interprocess communication
                - pid: allows for different sets of processes to have the same process ID without conflicts. useful for checkpoint/restore in userspace (CRIU)
                  to freeze a running application and save it to restore it later. CRIU used for process migration, container management, or system recovery either
                  on the same machine or a different one 
                - network: allows for isolation of the system resources associated with networking, each having their own network devices, IP addresses, etc. 
                  allows for process or processes to have access to these network resources, but nothing else
                - user: provide a container with its own set of UID's, separate from the parent allowing for assignment to to a new usernamespace with new PID 
                  namespace and all other namespaces. when a new process is cloned, it can have access to all the resources of the parent process despite being
                  a new process. sensitive security due to creating non priveledged containers
    ** Professor Lecture 1 [2025-2-24 Mon]
      *** Threads
        - useful for running different functions inside a process
        - threads are useful to organize different functions (think about java functions and classes)
        - good for parallel processing 
        - breaks a process into threads, and then each CPU can simultaneously run the thread 
        - benefits of threads in comparison to processes: fast to make, fast to switch, fast to terminate, lower cost to communicate 
        - for processes to communicate, they need to go through the kernel to access the IPC to communicate to another process. however, with threads we can 
          communicate with each other because they share the same memory, things are more control 
        - 