* Chapter 2: Operating System Overview
    ** Student Lecture 1 [2025-2-03 Mon]
        *** Operating System
          - a program that controls the execution of application programs
          - an interface between applications and hardware
          - main objectives of an OS: convenience (makes a computer easy to use), efficiency (computer system resources used effectively), 
            ability to evolve (system can update and evolve through patches and development of new system functions)
          - important resources that the OS manages: 1. CPU processing time 2. memory and storage 3. communication (wifi)
          - good resource manager for applications (run applications faster) efficiency
          - OS is convenient for being a user interface 
          - evolution: has to be easy to evolve, easy to code from a programming perspective

        *** Computer Hardware and Software Structure
          - the computer has a software and hardware side. we learned from CH1 that the different sections of hardware work together to 
            be more efficient. software is the same.
          - application programs use libraries/utilities through programming interfaces, and libraries/utilities use the binary interface
            to communicate with the OS. the OS then communicates with the hardware through the instruction
            set architecture we learned in CH1. (fetch/execute, interrupts, etc.)
          - easier to understand: users interact with the computer through applications. these applications are developed by programmers that 
            use programming languages. these programmers use existing utilities and libraries to assist in creating those applications. to mask 
            the hardware aspect to programmers, the OS is a more convenient interface to use the system. the OS also makes it easier for applications
            to access. think of it as the last layer before things get complex.
        
        *** Operating System Services
          - Program development: supplied with the OS, and are application program development tools such as editors and debuggers
            used to assist programmers
          - Program execution: the OS handles scheduled duties such as loading instructions and data into the main memory, intitializing I/O 
            devices and files, and preparing other resources to execute programs
          - Access I/O devices: the OS provides an interface for programmers to access I/O devices using simple reads and writes. each I/O
            device has their own set of instructions or controls so without the OS, it wouldn't be as simple.
          - Controlled access to files: the OS understands the structure of data and nature in I/O devices such as disk drives to control access.
            the OS also provides a protective mechanism to control the access to files in the case of multiple users
          - System access: the OS controls access to the system, providing protection of data and resources from unauthorized users
          - Error detection and response: device errors and software errors such as memory failure or division by zero cause errors 
            so the OS provides a service that can end, retry, or report the issue to the application, therefore clearing the error.
          - Accounting: the OS collects usage statistics and monitors the performance to allow for future performance enhancements.

          Key Interfaces:
          - Instruction set architecture (ISA): the ISA is the boundary between the software and the hardware. it is the commands that 
            a CPU can understand and execute. a model of the language instructions that a computer can follow. programs and applications can
            directly access the ISA through a subset of instructions (user ISA). the OS has access to the ISA through (system ISA) to manage
            system resources
          - Application binary interface (ABI): defines a standard for binary portabilty across programs. defines the system call interface
            to the OS (a way for applications to request services from the OS), and the hardware and software resources available 
            in a system through user ISA.
          - Application programming interface (API): gives a program access to the hardware resources and services available through user ISA.
            these are supplemented through high-level language library calls (HLL). using API allows for easy port (restoration) to other systems. 

        *** The Operating System as a Resource Manager
          - the OS is responsible for controlling the computer's resources such as the I/O, main and secondary memory, and processor execution time
          - the OS functions in the same way as ordinary computer software; like a program executed by the processor
          - OS frequently relinquinshes control, and depends on the processor to allow it to regain control
          - processor ceases executing the OS program, and the OS does other work. evnetually the OS resumes control to continue work. 
          - main resources are managed by the OS through kernel or nucleus which is the main function to control and manage resources and hardware.
        
        OS evolution/history:

        *** Serial Processing
          - the earliest form of computing with no operating system. programmers had to directly interact with the hardware one by one
          - problem because time consuming and therefore inefficient

        *** Simple Batch Systems
          - improved compared to serial processing where groups worked together and executed things sequentially
          - introduced a new language (JCL job control language)
          - improved utilization and reduced setup time
          - however, monitor consumed some processor time
          - can cause delays if batch doesnt work

        *** Multiprogrammed Batch Systems
          - uniprogramming is inefficient because wasted CPU time by waiting for instructions
          - solution: multiprogrammed batch systems
          - uses multiple programs where each program has their own runtime and job, when the CPU waits it checks for a different instruction and 
            performs it for better efficiency
          - more complex because introduces many programs rather than just one program
          - increased throughput meaning more efficient

        *** Time Sharing System
          - time slicing that splits the CPU time into sections for users
          - each user is given 0.2 seconds of CPU time, allows for many users to run programs so that everyone has a fair share of CPU time
          - causes inefficiency
          - data for each user each 0.2 seconds data is uploaded to disk, so that no data is lost. users can use this CPU time and data saving to use
            the computer.
        
        *** Processes
          - a program in execution, an instance of a program that is running

        *** Components of a processing
          - executable program
          - associated data needed for the program to execute
          - the execution contex/progress state of the program

        *** Process management
          - typical process implementation: ram has a process last as well as the context, data, and code for each process
          - CPU register has limited information about which process it is executing

        *** Causes of process errors
          - improper synchronization: multiple processes trying to modify data
          - failed mutual execution
          - non determinate program operations
          - deadlocks

        *** Support of modular prograrmming
          - allows developers to program easily

        *** Virtual memory
          - memory management technique 
          - paging: processes are made up of fixed sized blocks called pages that allows for dynamic mapping
          - allows for data transfer between ram and second memory

        *** Information protection and security
          - the type of threat faced will vary and depends on the organization
          - availability, confidentiality, integrity, and authenticity
          
        *** Windows executive
          - kernal mode components that provide services to device driverse
          - secuirty provided by SRM (security reference monitor)

        *** Scheduling and resource management
          - resource allocation policies: 
            - fairness: fair share of system resources
            - differential responsiveness: the OS should allocate resources based on the priority and urgency of processes
            - efficiency: OS maximizes resources without any wasted

        *** Different OS architectural approaches
          - microkernel: simplifies implementation, provides flexibility, well suited to a distributed environment
          - multithreading: a process are divided into multiple threads that can run concurrently
          - symmetric multiprocessing: multiple processeors share memory and OS resources (AMD and Intel use SMP)
            - good for performance, each process can run simultaneously on different processors
            - availability, of one fails the other continues to run
            - growth and scaling: easy to upgrade and scaling
          - distributed operating systems: 
          - object oriented design

        *** Fault tolerance
          - the ability of a system to keep running when a failure happens
          - increases system reliability by ensuring continued operation even when errors occur
          - metrics: reliability (probability of correct operation to a specific time), mean time to failure, mean time to repair, availaibilty
            (the fraction of time that the system is available) 
          - high MTTF and low MTTR 
          - types of faults: component failure, operator error, physical interference, design error, program error, and data structure error
            - permanent faults and temporary faults
          - fault tolerance has redundancy in the form of spatial, temporal faults, and Information
          - the OS supports fault tolerance through methods like process isolation, concurrency controls, etc.
          - the multiprocessor OS design allows for handling of multiple processes
            - key design: concurrent processes, scheduling, synchronization, etc.
          - multiprocessors need careful OS design to prevent faults

    ** Professor Lecture 1 [2025-2-6 Thu]
      *** Instructions of a Hypothetical Machine
        - instruction format: every instruction has two parts, an opcode and an address
        - opcode has 4 bits and address has 12 bits
        - opcode is a number in bits that tells the computer what to do (read,etc.)
        - address of an instruction is the second part that shows where to perform the opcode action
        - ex. 0001 = load AC from memory, 0010 = store AC to memory, 0101 = add to AC from memory
        - when doing binary like 2^12, split into 2^10 * 2^2 and remember that 2^10 = 1024.
        - 3 registers: program counter (PC address of instruction), instruction register (IR instruction being executed), 
          accumulator (AC temporary storage registers)
        - refer to slides for image of example of program execution and fetching between memory and CPU registers
        - slide titled instruction cycles is gonna be on the exam/midterm 
      
    ** Professor Lecture 2 [2025-2-13 Thu]
      *** Application Binary Interfaces
        - defines system calls which are used by the kernal to access system resources
        - the reason for system calls is for an extra layer of protection because we need to manage programs accessing the system resources
        - system calls became a thing when time sharing was still relevant in the earlier days of computing, people would hack and access other's memory,
          and they would even make their time share on the main computer longer. the use of system calls prevents this, because each person needs to 
          go through another layer or protection.
      
      *** Multiprogramming example
        - two types of jobs the os needs to handle: heavy computing (cpu intensive) and heavy io (io intensive)
          - cpu intensive could be computing a 100x100 matrix 
          - io intensive could be reading and writing a lot of data to rewrite a data table/database